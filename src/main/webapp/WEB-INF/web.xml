<?xml version="1.0" encoding="UTF-8"?>
<web-app id="pdmanager"  
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <display-name>PDManager Web Application</display-name>
    
    <!-- This defines the locations of the Spring config files that make up the web application context. -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            /WEB-INF/applicationContext-*.xml
        </param-value>
    </context-param>

    <!-- Defines the location of the Log4J configuration file. -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>
    
    <!-- Refresh log4j configuration every 60 seconds. -->
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>60000</param-value>
    </context-param>
    
    <!-- Supresses expose of the web app root system property that would enable log file paths
         relative to application root directory.
         Disabled here to avoid conflict with the application's web app root system property -->
    <context-param>
        <param-name>log4jExposeWebAppRoot</param-name>
        <param-value>false</param-value>
    </context-param>

    <!-- Sets the character encoding on the request object before its content is read by any servlet -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>

    <!-- Spring security filter which secures the application. -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <!-- Validates that rest requests have a valid instance of the specified Json web token -->
    <filter>
        <filter-name>jsonWebTokenFilter</filter-name>
        <filter-class>uk.gov.hmcts.pdm.publicdisplay.common.rest.JsonWebTokenFilter</filter-class>
        <init-param>
            <param-name>token</param-name>
            <param-value>LOCAL_PROXY</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>jsonWebTokenFilter</filter-name>
        <url-pattern>/api/*</url-pattern>
    </filter-mapping>
    
    <!-- Listener to initialise Log4J. This is defined prior to the Spring context loader to ensure that logging
         starts up as early as possible to ease diagnosis of Spring context initialisation issues. -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>

    <!-- Listener to initialise the Spring context. -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    <!-- Prevent user logging in multiple times -->
    <listener>
        <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
    </listener>

    <!-- Servlet to handle Spring MVC -->
    <servlet>
        <servlet-name>pdmanager</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>pdmanager</servlet-name>
        <url-pattern>/*</url-pattern>
        <url-pattern>/resources/*</url-pattern>
    </servlet-mapping>

    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>
    
    <!-- Servlet to handle RESTful web services -->
    <servlet>
        <servlet-name>cxf</servlet-name>
        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
      </servlet>
 
    <servlet-mapping>
        <servlet-name>cxf</servlet-name>
        <url-pattern>/api/*</url-pattern>
    </servlet-mapping>
    
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <error-page>
        <exception-type>java.lang.Throwable</exception-type>
        <location>/WEB-INF/jsp/error/error.jsp</location>
    </error-page>

    <error-page>
        <error-code>401</error-code>
        <location>/WEB-INF/jsp/error/error.jsp</location>
    </error-page>

    <error-page>
        <error-code>403</error-code>
        <location>/WEB-INF/jsp/error/error.jsp</location>
    </error-page>

    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/jsp/error/error.jsp</location>
    </error-page>
     
    <!-- Spring Security secures all content except the home page which
         allows WebLogic container managed authentication to be used as
         all unauthenticated users are redirected to the home page -->
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>PDManager Home Page</web-resource-name>
            <url-pattern>/home</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <role-name>AUTHENTICATED_USER</role-name>
        </auth-constraint>
    </security-constraint>

    <security-role>
        <role-name>AUTHENTICATED_USER</role-name>
    </security-role>

    <!-- XHIBIT data source -->
    <resource-ref>
       <res-ref-name>jdbc/XhibitDataSource</res-ref-name>
       <res-type>javax.sql.DataSource</res-type>
       <res-auth>Container</res-auth>
    </resource-ref>
    
    <!-- Default WebLogic work manager
    <resource-ref>
        <res-ref-name>wm/default</res-ref-name>
        <res-type>commonj.work.WorkManager</res-type>
        <res-auth>Container</res-auth>
    </resource-ref> -->
    
    <!-- Default WebLogic timer manager
    <resource-ref>
        <res-ref-name>tm/default</res-ref-name>
        <res-type>commonj.timers.TimerManager</res-type>
        <res-auth>Container</res-auth>
    </resource-ref> -->

</web-app>
