/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
	id 'application'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.springframework.boot' version '3.3.5'
	id 'com.github.ben-manes.versions' version '0.52.0'
	id 'org.owasp.dependencycheck' version '10.0.4'
	id 'org.sonarqube' version '5.1.0.4882'
	id 'checkstyle'
  id 'pmd'
  // Comment out id 'war' to work in Eclipse
  id 'war'
  id 'jacoco'
  id "io.freefair.lombok" version "8.13"
}

group = 'uk.gov.hmcts'
version = '1.0'
description = 'pdmanager'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {

    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    functionalTest {
        java {
          compileClasspath += main.output
          runtimeClasspath += main.output
          srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }
}

processSmokeTestResources {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
    
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9099'
    }
}


tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}


tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
    events "standardOut", "started", "passed", "skipped", "failed"
  }
}

test {
  failFast = true
}



// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}



// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "functionalTest",
    "smokeTest",
    "pmd"
  ]
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.26.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "7.5.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.smokeTest, sourceSets.functionalTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def exclusions = "**/src/main/java/uk/gov/hmcts/pdm/publicdisplay/manager/dto/**, **/src/main/java/uk/gov/hmcts/pdm/business/entities/**"
sonarqube {
  properties {
    property "sonar.projectName", "pdm"
    property "sonar.projectKey", "pdm-sonarqube"
    property "sonar.cpd.exclusions", exclusions

  }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
    }
}

ext {
  log4JVersion = "2.24.3"
}

ext['snakeyaml.version'] = '2.0'

configurations {
    all*.exclude group: 'org.glassfish.hk2', module: 'hk2'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.3.5'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.3.5'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.3.5'
    implementation 'org.springframework.data:spring-data-commons:3.4.3'
    implementation 'org.springframework.data:spring-data-jpa:3.4.3'
    // Comment out org.hibernate:hibernate-entitymanager to work in Eclipse
    implementation 'org.hibernate:hibernate-entitymanager:5.6.15.Final'
    implementation 'org.postgresql:postgresql:42.7.8'
    implementation 'org.springframework.security:spring-security-core:6.4.3'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.1.3.RELEASE'
    implementation ('org.apache.httpcomponents:httpclient:4.5.14') {
    exclude group: 'commons-logging', module: 'commons-logging'
  }
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springframework:spring-tx:6.1.14'
    implementation 'org.dbunit:dbunit:2.8.0'
    implementation 'joda-time:joda-time:2.13.1'
    implementation 'org.springframework.security:spring-security-taglibs:6.4.3'
    implementation 'org.springframework.security:spring-security-web:6.4.3'
    implementation 'org.quartz-scheduler:quartz:2.5.0'
    implementation 'org.apache.cxf:cxf-spring-boot-starter-jaxrs:4.1.3'
    implementation 'com.github.hmcts.java-logging:logging:6.1.9'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
    implementation 'javax.servlet:servlet-api:3.0-alpha-1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.20.1'
    implementation 'org.springframework.boot:spring-boot-starter-jersey:3.3.5'
    implementation 'org.owasp.esapi:esapi:2.6.0.0'
    implementation 'org.jasypt:jasypt:1.9.3'
    implementation 'org.springframework:spring-context:6.1.14'
    implementation 'org.springframework:spring-context-support:6.1.14'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:10.1.48'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.2'
    implementation 'org.yaml:snakeyaml:2.4'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.48'
    implementation 'org.apache.tomcat.embed:tomcat-embed-websocket:10.1.48'
    implementation 'org.apache.xmlgraphics:batik-css:1.18'
    implementation 'com.mchange:c3p0:0.11.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.3'
    implementation 'org.htmlunit:neko-htmlunit:4.10.0'
    implementation 'ch.qos.logback:logback-core:1.5.20'
    implementation 'ch.qos.logback:logback-classic:1.5.20'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.springframework.boot:spring-boot-starter-security:3.3.5'
    implementation 'org.owasp.antisamy:antisamy:1.7.8'
    implementation 'com.azure.spring:spring-cloud-azure-starter-active-directory:5.23.0'
    implementation 'org.springframework.security:spring-security-oauth2-jose:6.4.3'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-authorization-server', version: '1.4.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.5'
    testImplementation 'org.easymock:easymock:5.5.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.16.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    compileOnly 'org.springframework.boot:spring-boot-starter-tomcat:3.3.5'
    implementation group: 'io.rest-assured', name: 'rest-assured'
}

mainClassName = 'uk.gov.hmcts.PdmanagerSpringbootApplication'

bootJar {
  archiveFileName = "pdmanager-1.0.war"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

configurations {
   smokeTestImplementation.extendsFrom testImplementation
   smokeTestRuntimeOnly.extendsFrom runtimeOnly
   functionalTestImplementation.extendsFrom testImplementation
   functionalTestRuntimeOnly.extendsFrom runtimeOnly
   all*.exclude group: 'org.glassfish.hk2', module: 'hk2'
   all*.exclude group: 'commons-logging', module: 'commons-logging'
 }

tasks.register('smoke', Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

tasks.register('functional', Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}
